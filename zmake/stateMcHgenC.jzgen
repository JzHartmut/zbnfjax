
==JZcmd==
##Given script variable: zsrc is a script variable which is filled by the stateMgen conversion control routine which calls this script.
##zsrc is type of org.vishia.stateMGen.StateMGen$ZbnfResultData. 
##See the maybe written report file of data structure given by command line arg checkdata:result/data_StatemSrc.html (data_StatemSrc.dst.html).
##Given script variable: sOutfile: path to the file which is written by <+>...<.+>

##!checkJZcmd = "result/check_States.genC.txt";
##!checkXml = <:><&currdir>/check_States.genC.xml<.>;

##Access to parts of the sOutfile:
Filepath outfile = &sOutfile; 


##used for instanceof check:
Class classStateComposite = org.vishia.states.StateComposite;   
Class classStateCompositeFlat = org.vishia.states.StateCompositeFlat; 
Class classStateParallel = org.vishia.states.StateParallel;        
Class classStateDeepHistory = org.vishia.states.StateDeepHistory;  




main(){
    <+><:s>
:::://This file is generated from StateMGen.java 
::::#include <Fwc/fw_StateMachine.h>
::::#include "<&zsrc.headerSrc>"  //(stateMcHgen.jzgen: headerSrc)
::::<.+>
  for(includeline:zsrc.includeLines) 
  { <+>
:::://#include <&includeline><.+>
  }
    <+>  
::::    
###::::#include "<&outfile.name()>.h"  //include the generated header file.
::::
:::://That is a helper for debugging.
::::#ifdef __DEBUG_entryprintf_States_Fwc__
::::  #include <stdio.h>
::::#endif
::::
::::char const signature_State_Fwc[] = "<&zsrc.headerSrc>";
:::://all entry- and exit-prototypes: (stateMcHgenC.jzgen)<.+>

  for(state: zsrc.listStates)                                  
  { <+>
::::extern <&state.stateId> const <&state.stateId>_StateConst;<.+>
  }

  call genExitRoutine();
  
  for(state: zsrc.listStates) {
    call gen_exit(state=state);
    call gen_Trans(state = state);
    if(state ?instanceof classStateComposite) {
      call gen_CurrentState(state = state);
    }
    if(state ?instanceof classStateParallel) {
      call gen_ExitParallel(state = state);
    }
  }
    
  for(state: zsrc.listStates) {
    Obj stateEncl = state; //The state which is checked.
    for(trans: stateEncl.aTransitions) { call gen_DoTrans(state = state, stateEncl = stateEncl, trans = trans); }    
    stateEncl = stateEncl.enclState;
  }
    
  
  <+>
::
:://All const state declaration: (stateMcHgenC.jzgen)<.+>
  for(state: zsrc.listStates)
  { Obj auxInfo = state.auxInfo();
    <+>
::::extern <&auxInfo.stateName> const <&auxInfo.stateName>_StateConst;<.+>
  }
  
  for(state: zsrc.listStates) { call generateStatePathConst(state=state); }
  <+>
::
:://All const state definition: (stateMcHgenC.jzgen)
::
::<.+>
  for(state: zsrc.listStates) { call generateStateConst(state=state); }

  call gen_stepStates();
  call gen_stepTimer();
  
  
} ##main                           



##This is the generated routine to exit any state.
##The routine use some special definitions, therefore it is generated and not hard coded.
sub genExitRoutine()
{
<+>

//The generated exit routine calls the exit of the current state of composite and exits all states in the hierarchie till exclusive the parent composite state.
//It is used when the parent composite state is exited. //(stateMcHgenC.jzgen: exitComposite)
static void exitGenState(<&zsrc.stateRnFormalArgs>, StateBaseGen const* stateCurr, int level) {
  if(stateCurr != null) {
    if(stateCurr->kind == kComposite_EKindState_StateMachine_Fwc) {
      StateBaseGen const* stateCurrent = stateCurr->stateCurrent(<&zsrc.stateRnActArgs>);
      //exits the current state(s) of composite, recursively for all composites. But not the composite itself.
      exitGenState(<&zsrc.stateRnActArgs>, stateCurrent, stateCurr->ixOwnState +1);  
    }
    //int levelComposite = stateCurr->ixCompositeState;
    //if(levelComposite < level) {                                                 
    //  levelComposite = level;  //no more 
    //}
    StateBaseGen const* stateExit = stateCurr;
    StateBaseGen const* stateExitLast = null;
    int ixStatePath = stateCurr->ixOwnState;
    do {
      if(stateCurr->kind == kParallel_EKindState_StateMachine_Fwc) {
        stateExit->exitParallel(<&zsrc.stateRnActArgs>, stateExitLast);
      }
      stateExit->exit(<&zsrc.stateRnActArgs>);
      stateExitLast = stateExit;
      stateExit = stateExit->statePath.ptr[--ixStatePath];  //the enclosing state.
    } while(ixStatePath >= level); //Composite);
  }
}


//Prototype for the doEntry execution in deep history.
static int doEntryDeepHistory(<&zsrc.stateRnFormalArgs>, StateBaseGen const* stateDst);

//Routine to entry in the old current state(s), invoked if a History pseudo class is given as destination in a transition.
//Note: it is only visible in this compilation unit, static and without prototype in a header.
//Note: It is the same algorithm as in Java: org.vishia.states.StateComposite.doEntryDeepHistory(...)
//  but the argument types are generated, in Java there is an automatic aggregation to the enclosing class.
//
static int entryDeepHistory(<&zsrc.stateRnFormalArgs>, StateBaseGen const* stateComposite) {
  int cont;
  StateBaseGen const* stateDst = stateComposite->stateCurrent(<&zsrc.stateRnActArgs>); //get the old current state
  if(stateDst == null) {
    //on first history entry, an history state is not known.
    stateDst = stateComposite->statePath.ptr[stateComposite->ixOwnState+1]; //the default state is the last state in statePath (stateMcHgenC.jzgen: stateDefault)
  }
  cont |= doEntryDeepHistory(<&zsrc.stateRnActArgs>, stateDst);  //stateDst is the old current state of this composite.
  return cont;
}


//Routine to execute the entry in deep history. 
//Note: It is only visible in this compilation unit, static and without prototype in a header.
//Note: It is the same algorithm as in Java: org.vishia.states.StateComposite.doEntryDeepHistory(...)
//  but the argument types are generated, in Java there is an automatic aggregation to the enclosing class.
//
static int doEntryDeepHistory(<&zsrc.stateRnFormalArgs>, StateBaseGen const* stateDst) {
  int cont = 0;
  int ix;
  StateBaseGen const* const* statePath = stateDst->statePath.ptr;
  int ixOwnState = stateDst->ixOwnState;  //The last position for the statePath in statePath 
  for(ix = stateDst->ixCompositeState+1; ix <= ixOwnState; ++ix) {
    StateBaseGen const* stateEntry = statePath[ix];
    cont |= stateEntry->entry(<&zsrc.stateRnActArgs>);
  }
  if(stateDst->kind == kComposite_EKindState_StateMachine_Fwc) {
    //if the current state is a composite too:
    entryDeepHistory(<&zsrc.stateRnActArgs>, stateDst);
  } 
  else if(stateDst->kind == kParallel_EKindState_StateMachine_Fwc) { 
    //If the current state is a StateParallel, enter all parallels with deep history:
    for(ix = stateDst->ixOwnState +1; ix < stateDst->statePath.length; ++ix) {
      StateBaseGen const*  stateP = statePath[ix];
      cont |= stateP->entry(<&zsrc.stateRnActArgs>);   ////entry in the parallel state bough, composite or simple
      if(stateP->kind == kComposite_EKindState_StateMachine_Fwc) {
        cont |= entryDeepHistory(<&zsrc.stateRnActArgs>, stateP);
      }
    }
  }
  return cont;
}

<.+>
}



##The generated exitGen_Statename is used as referred routine in the StateConst
sub gen_exit(Obj state: StateSimple)
{ Obj zstate = state.auxInfo();
  <+>
::  
::void exitGen_<&state.stateId>(<&zsrc.stateRnFormalArgs>) {<.+>
  Obj exitRn = zsrc.idxExit.get(state.stateId);
  if(exitRn){
  <+>
::  exit_<&exitRn.restName>(<:for:argVariable:exitRn.argVariables><&argVariable><:hasNext>, <.hasNext><.for>);   //(stateMcHgen.jzgen: call exit1)<.+>
  }
  <+>
::  #ifdef __DEBUG_entryprintf_States_Fwc__
::    printf(" exit <&state.stateId>;\n");
::  #endif
::}
::<.+>
  <+>
::  
::int entryGen_<&state.stateId>(<&zsrc.stateRnFormalArgs>) {
::  int ret = 0;<.+>
  Obj entryRn = zsrc.idxEntry.get(state.stateId);
  if(entryRn){
  <+>
::  ret = entry_<&entryRn.restName>(<:for:argVariable:entryRn.argVariables><&argVariable><:hasNext>, <.hasNext><.for>);  //(stateMcHgen.jzgen: call entry()) <.+>
  }
  <+>
::  #ifdef __DEBUG_entryprintf_States_Fwc__
::    printf(" entry <&state.stateId>;\n");
::  #endif
::  return ret;
::}
::<.+>
}




##Generates code for all checkTrans routines from all states.
##Generates code for all doTrans routines which calls the correct entry and exit routines.
##
sub gen_Trans(Obj state:StateSimple)
{

  <+>
::    
::    
:://All transition execution routines: (stateMcHgenC.jzgen)
::<.+>
  
  Obj zsrcState = state.auxInfo(); 
  


  <+>
:://The transition of the state: (stateMcHgenC.jzgen: checkTransGen)
::int checkTransGen_<&state.stateId>(<&zsrc.stateRnFormalArgs>) {
::  int ret = 0 ;
::<.+>
  if(state ?instanceof classStateParallel) {
    for(pstate : state.aParallelstates ) {
      <+>
::::::  ret |= checkTransGen_<&pstate.stateId>(<&zsrc.stateRnActArgs>);
::::::<.+>
    }
    <+>
::::  if(ret & mEventConsumed_States_Fwc) {
::::    event = 0;  //don't apply the event to enclosing transitions if it was consumed intern. (stateMcHgenC.jzgen: event=0)
::::  }
::::<.+>
  }
  elsif(state ?instanceof classStateComposite) {
    Obj stateDefault = state.stateDefault;
    Obj zDefault = stateDefault.auxInfo();
    <+>
::::  { StateBaseGen const* stateCurr = thiz->state.state<&state.stateId>; //(stateMcHgenC.jzgen: genTrans)
::::    if(stateCurr == null) {
::::      //do entry.
::::      stateCurr = thiz->state.state<&state.stateId> = &<&stateDefault.stateId>_StateConst.<&zDefault.stateIdName>;
::::    }
::::    ret = stateCurr->checkTrans(<&zsrc.stateRnActArgs>);
::::    if(ret & mEventConsumed_States_Fwc) {
::::      event = 0;  //don't apply the event to enclosing transitions if it was consumed intern. (stateMcHgenC.jzgen: event=0)
::::    }
::::  }
::::<.+>
  }
  Obj trans1 = zsrc.idxCheck.get(state.stateId);
  if(trans1){ 
    <+>
::::  ret |= checkTrans_<&trans1.restName>(<&zsrc.stateRnActArgs>, &<&state.stateId>_StateConst); //(stateMcHgenC.jzgen: trans1)
::::<.+>
  }
  <+>
::  return ret;
::}
::<.+>  
}





sub gen_CurrentState(Obj state: StateSimple)
{
  <+>
::
::
::StateBaseGen const* currentStateGen_<&state.stateId>(<&zsrc.stateRnFormalArgs>) {
::  return <&zsrc.stateInstance>.state<&state.stateId>;
::}
::<.+>
}



sub gen_ExitParallel(Obj state: StateParallel)
{
  <+>
::
::
::void exitParallelGen_<&state.stateId>(<&zsrc.stateRnFormalArgs>, StateBaseGen const* lastExitState) { <.+>
  for(stateParallel: state.aParallelstates) {
    String stateParallelConst = <:>&<&stateParallel.stateId>_StateConst.<&state.stateId><.>;
    Num levelComposite = stateParallel.statePath.[] -2;
    <+>
::::  if(<&stateParallelConst> != lastExitState) {    
::::    exitGenState(<&zsrc.stateRnActArgs>, <&stateParallelConst>, <&levelComposite>); //(stateMcHgen.jzgen: exitGenStateParallel)
::::  }<.+>
  }##for
  <+>
::}
::<.+>
}





sub gen_DoTrans(Obj state, Obj stateEncl, Obj trans)
{
  Obj idxEntry = zsrc.idxEntry;
  Obj idxExit = zsrc.idxExit;
  Obj idxCheck = zsrc.idxCheck;


  <+>
::                     
::      
:://Transition of <&state.stateId>
::static int doTrans<:---<&state.stateId>_---><&stateEncl.stateId>_<&trans.transId>(<&zsrc.transFnArgs>) //(stateMcHgenC.jzgen dotrans)
::{ int trans = 0;
::  //state: <&state.stateId>
::  //exit the current state of this composite till given level: (stateMcHgenC.jzgen: doTrans-exit)
::  exitGenState(<&zsrc.stateRnActArgs>, thiz->state.state<&state.compositeState.stateId>, <&trans.ixCommonInStatePath>);  ##Note: ixCommon+1, but statePath in C does not start with topState.
::<.+>
  <+>  
::  <:if:trans.zsrcTrans><&trans.zsrcTrans.code><.if><.+>
  
  String nameTransAction = <:><&state.stateId>$<&trans.transId><.>;
  Obj transAction = zsrc.idxTransAction.get(nameTransAction);
  if(transAction){
    <+>
::::  transAction_<&trans.transId>(<:for:argVariable:transAction.argVariables><&argVariable><:hasNext>, <.hasNext><.for>);  //(stateMcHgen.jzgen: transAction) <.+>        
  }
  Obj entryStateLast;                                                    
  for(entryState:trans.entryStates) {         
    if(entryState ?instanceof classStateDeepHistory) {
      <+>
::::::  entryDeepHistory(<&zsrc.stateRnActArgs>, &<&entryStateLast.stateId>_StateConst.<&zState.stateIdName>);
::::::<.+>
    } else {
      if(entryState.compositeState) { ##check whether it is not null. It is null on a parallel state or the stateTop.                                                   
        Obj zState = entryState.auxInfo();
        <+>
::::::::  <&zsrc.stateInstance>.state<&entryState.compositeState.stateId> = &<&entryState.stateId>_StateConst.<&zState.stateIdName>; //(stateMcHgenC.jzgen: set state)<.+>
      }
      if(entryState.auxInfo().timeCondition) { 
        <+>
::::::::  <todo&zsrc.variables.stateInstance>.timer<&entryState.compositeState.stateId> = <&entryState.auxInfo().timeCondition>; //(stateMcHgenC.jzgen: set time )<.+>  
      } //timeCondition
      Obj entry = idxEntry.get(entryState.stateId);  //search the state in the idxEntry, search whether a entry method was defined.
      if(entry) {
        <+> 
::::::::  entry_<&entry.restName>(<:for:argVariable:entry.argVariables><&argVariable><:hasNext>, <.hasNext><.for>);  //(stateMcHgen.jzgen: call entry) <.+>
      }
      
      entryStateLast = entryState;
      <+>
::::::  #ifdef __DEBUG_entryprintf_States_Fwc__
::::::    printf(" entry <&entryState.stateId>;\n");
::::::  #endif
::::::<.+>
    }
  }// for entryState 
  if(  entryStateLast ?instanceof classStateCompositeFlat  ##a StateComposite too.
    || entryStateLast ?instanceof classStateParallel
    ) {
    Obj zState = entryStateLast.auxInfo();
    <+>
::::  //entryDefault(<&zsrc.stateRnActArgs>, &<&entryStateLast.stateId>_StateConst.<&zState.stateIdName>, 999,888);
::::<.+>
  }
  <+>    
::  trans |= mTransit_States_Fwc; <.+>   
  <+>
::  return trans;
::}                                                               
::<.+>                                                   
}



sub generateSubStateRef(Obj state:StateCompositeFlat)
{
  String sep = "";
  if(state.aSubstates) { 
  <+>
::  //The nested states, it is part of the struct definition: (stateMcHgenC.jzgen)
::,<.+>  
  for(substate: state.aSubstates) 
  {
    if(0 && substate ?instanceof classStateCompositeFlat) {
      <+>
::::::{ { 0, null }
:::::://<&substate.auxInfo().stateName> const <&substate.auxInfo().stateName> = 
::::::, <.+>
      
      call generateSubStateRef(state = substate);
      <+>
::::::};
::::::
::::::
::::::<.+>
    } elsif(substate ?instanceof classStateDeepHistory) {
      <+>
::::::<&sep> { 0 }  //deepHistory<.+>      
    } else {
      <+>
::::::<&sep> &<&substate.auxInfo().stateName>_StateConst<.+>
    }
    sep = ",";
  }}


}


sub generateStatePathConst(Obj state:StateSimple)
{
  Obj auxInfo = state.auxInfo();                                                
  String sep = "";      
    <+>
::
:://It is the path to the nested state inside the top state, used for a history transition, used as info for documentation.
:://
::static StateBaseGen const* const statePath_<&state.auxInfo().stateName> [] = ////(stateMcHgenC.jzgen: const statePath)
::{<.+>
  Num nState = 0;
  for(stateParent: state.statePath) { 
    if(nState > 0) { ##The top state is excluded because there is no state const presentation.
      Obj zState = stateParent.auxInfo();
      <+>
::::::<&sep> &<&stateParent.stateId>_StateConst.<&zState.stateIdName><.+>    
      sep = ",";
    }
    nState = nState + 1;
  }//for
  if(state ?instanceof classStateCompositeFlat) {
    Obj zState = state.stateDefault.auxInfo();
    <+>
::::  //stateDefault ((stateMcHgenC.jzgen: stateDefault-path)    
::::<&sep> &<&state.stateDefault.stateId>_StateConst.<&zState.stateIdName><.+>    
  } 
  elsif(state ?instanceof classStateParallel) {
    <+>
::::  //stateParallel ((stateMcHgenC.jzgen: stateParallel-path)<.+>    
    for(stateParallel: state.aParallelstates) { 
      Obj zState = stateParallel.auxInfo();
      <+>
::::::<&sep> &<&stateParallel.stateId>_StateConst.<&zState.stateIdName><.+>    
    }//for
  }
  <+> 
::};
::
::<.+>  
}




##sub to generate the ...StateConst code
##
sub generateStateConst(Obj state: StateSimple)
{
  Obj auxInfo = state.auxInfo();
  if(state.compositeState){
    Num ixCompositeState = state.compositeState.statePath.[] -2 ;  ##Note the last is the composite in Java, the Statepath in C does not start with top
  } else {
    Num ixCompositeState = -1;  
  }
  Num ixOwn = state.statePath.[] -2; ##Note the last is the own in Java, the Statepath in C does not start with top therewith -2
  //
  if(state ?instanceof classStateComposite) {
    String kind = "kComposite_EKindState_StateMachine_Fwc";
  } elsif(state ?instanceof classStateCompositeFlat) {
    String kind = "kCompositeFlat_EKindState_StateMachine_Fwc";
  } elsif(state ?instanceof classStateParallel) {
    String kind = "kParallel_EKindState_StateMachine_Fwc";
  } else {
    String kind = "kSimple_EKindState_StateMachine_Fwc";
  }
  <+>   
::
:://It is the const description data for the state <&auxInfo.stateName>, containing the reference to the doTransition... routines.
:://
::<&auxInfo.stateName> const <&auxInfo.stateName>_StateConst = //(stateMcHgenC.jzgen: generateStateConst)
::{ //The state const head data, type StateBaseGen:
::  { signature_State_Fwc, <&auxInfo.stateId>   //->signature ->id
::  , <&ixCompositeState.intValue():%d>        //->ixCompositeState (in statepath)
::  , <&ixOwn.intValue()>   //->ixOwnState (in statepath)
::  , {statePath_<&state.stateId>, ARRAYLEN_SimpleC(statePath_<&state.stateId>) }  //->statePath.ptr  ->statePath.length
::  , <&kind>  //->kind  type: EKindState_StateMachine_Fwc
::  , <:if:state ?instanceof classStateComposite>currentStateGen_<&state.stateId><:else>null  //no StateComposite, currentState<.if> 
::  , checkTransGen_<&state.stateId>
::  , entryGen_<&state.stateId> 
::  , exitGen_<&state.stateId> 
::  , <:if:state ?instanceof classStateParallel>exitParallelGen_<&state.stateId><:else>null  //no StateParallel, exitParallel<.if> 
::  } 
::  //The dotrans routines used in the manual written transition routines: (stateMcHgenC.jzgen dotransConst)<.+>  
  for(dotransDst: auxInfo.dotransDst) {
    <+>
::::, doTrans<&state.stateId>_<&dotransDst><.+>        
  }
  <+>
::};
::
::<.+>
}





sub generateStateConstDef(Obj state: StateSimple, Obj auxInfo)
{ 


}







sub gen_stepStates() 
{
  Obj stateDef = zsrc.stateM.stateTop.stateDefault;
  Obj zstateDef = stateDef.auxInfo();
  <+>
::int stepStates_State_<&zsrc.userDataType>(<&zsrc.stateRnFormalArgs>)     
::{ StateBaseGen const* stateTop = thiz->state.statetop;
::  if(stateTop == null) {
::    //do entry.
::    stateTop = thiz->state.statetop = &<&stateDef.stateId>_StateConst.<&zstateDef.stateIdName>;
::  }
::  return stateTop->checkTrans(<&zsrc.stateRnActArgs>);
::}
::<.+>
}




sub gen_stepTimer() 
{
  <+>
::void stepStateTimer_State_ExampleSimpleData(struct ExampleSimpleData_t* thiz,int)
::{
::}
::<.+>
}



