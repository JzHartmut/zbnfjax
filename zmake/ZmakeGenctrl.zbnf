<?ZBNF-www.vishia.org version="1.0" encoding="iso-8859-1" ?>
##This script describes the syntax of a Zmake-generation-control-file.
$comment=(?...?).
$endlineComment=\#\#.  ##The ## is the start chars for an endline-comment or commented line in the parsed script. 

ZmakeGenctrl::= 
{ <ZmakeTarget> 
| <subtext> 
| <genFile> 
| \<= <variableAssign?setVariable> \<\.=\>
} \e.

##A Zmake-Script contains of targets, which are to do.
##The genControl Script determines the textual representation of some targets with the several use-able names.
##All named targets in the control script can be used as Zmake-target-name (translator name) in the users Zmake script.
##This file describes how a genControl script should be build.


ZmakeTarget::= \<:target = <$?@name> \> 
  <genContent?>
\<\.target\>.


subtext::= \<:subtext : <$?name> \><genContent?> \<\.subtext\>.



##A genControl script should have a part <:file>....<.file> which describes how the whole file should build.

genFile::= \<:file\>
  <genContent?>
\<\.file\>.
  
  


##The textual content of any target, file, variable etc.

genContent::=
{ \<= <variableAssign?setVariable> \<\.=\>                       ##Possibility to have local variables. It is constant text.
| \<= <referencedData>                                           ##A reference to user data
| \<:forInput\> <genContent?forInputContent> \<\.forInput\>
| \<:for:<forVariable>\<\.for\>
| \<:for:<forContainer>
| \<:forList:<forList>\<\.forList\>
| \<:if: <ifContainer>
| \<:hasNext\> <genContent?hasNext> \<\.hasNext\>
| \<+<variableAssignment?addToList>\<\.+\>
| \<*<$?fnEmpty>()\>
| \<*subtext : <callSubtext>
| \<*<valueElement>\>
| \<*\><?listElement>
| \<:\><genContentNoWhitespace?>\<\.\>
| \<:expandFiles\> <?expandFiles>
| <*|\<:|\<*|\<\.?text>                        ##text after whitespace but inclusive trailing whitespaces till next control <: <* <.
}.



callSubtext::=<$?name> [ : { <referencedData> ? , }] \>.


##valueElement::=<$?name>\.<$?elementPart>.
valueElement::=<datapath>.

datapath::=<?>{ [<?path>[$|@|][<$-?>]]? \.}.

genContentNoWhitespace::=<$NoWhiteSpaces>
{ [?\<\.\>]              ##abort on <.> 
[ \<:forInput\><genContentNoWhitespace?forInputContent>\<\.forInput\>
| \<: for : <forVariableNoWhitespace?forVariable> \<\.for\>
##| \<*<$?variableValue>\>
| \<*<$?fnEmpty>()\>
| \<*<valueElement>\>
| <*|\<:|\<*|\<\.?text>           ##text inclusive leading and trailing whitespaces
]
}.

##datapath::=<?>{ <$?datapath>? \.}.

variableAssign::= <$?@name> \> <genContent?> .

referencedData::= <$?name> = <datapath>.

##<:for:name:datapath> ...content ... <.for>
forContainer::= <$?@name> : <datapath> \> <genContent?> \<\.for[ : <$?@name> ]\>. ##name is the name of the container element data reference

##<:if:condition> ...content ... <:elsif:condition> ...content ... <:else> ...content ... <.if>
ifContainer::= <ifBlock> [{ \<:elsif : <ifBlock>  }][ \<:else\> <genContent?elseBlock> ] \<\.if\>.
ifBlock::= <condition> \> <genContent?>.

condition::=<?><datapath> [[<?operator> != | == ] [<""?value>|<*\>?value>]].

forVariable::= <$?@name>\> <genContent?> .

forVariableNoWhitespace::= <$?@name>\> <genContentNoWhitespace?> .

forList::= <$?@name>\> <genContent?> .

