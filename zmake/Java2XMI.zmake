##Zmake generate control file for XMI-generation from header files.
##The generated script should be called with following environments:
##CURDIR the current directory as base for the relativ file names

## Note: the currDir-variable is used internally to build an absolute path with <*input.absFile>
<=currDir><*var.currdir.text()><.=>

##The only one target of this generate-script: parse the header and translate to a XML-image, Then builds XMI. */
<:subtext:genXMI:inputset, output, target>
<=inputsExpanded:$target.allInputFilesExpanded()>
<:for:$input:$inputsExpanded>
##<:for:$inputsetPart:$inputset>
##<:for:$input:$inputsetPart.filesExpanded()>    ##for all source files call Zbnf2XMI with Cheader.zbnf
  <=cclabel><*$nextNr><.=>  ##build a current number for labels. Note: Windows has a problem if batchfiles are written with 0a instead 0d0a (Unix-Lineend). This is reported untruly by 'label not found'.
  <:>
  if exist %TMP_ZBNFJAX%/<*$input.localFile()>.xml goto :<*$cclabel> 
  call zbnfjax zbnf2xml -i:<*$input.absFile()> -s:%ZBNFJAX_HOME%/zbnf/Java2C.zbnf -y:%TMP_ZBNFJAX%/<*$input.localFile()>.xml "-a:@filename="<*$input.name()>"" --report:%TMP_ZBNFJAX%/<*$input.localDir()>.zbnf.rpt
  :<*$cclabel>
  <.>
<.for>
##<.for>
REM All parsed headers can transform via XSLT-2 using saxon in 2 steps.
echo building XMI
echo --rlevel=333 >%TMP_ZBNFJAX%\input.arg
<:for:$input:$inputsExpanded> ##<:expandFiles>
  echo -i%TMP_ZBNFJAX%/<*$input.localFile()>.xml >>%TMP_ZBNFJAX%\input.arg
<.for>
type %TMP_ZBNFJAX%\input.arg
echo on
%XSLT_EXE% --@%TMP_ZBNFJAX%\input.arg -t%ZBNFJAX_HOME%/xsl/Java2xmiTypes.xsl -w+ -y%TMP_ZBNFJAX%/types-xmi.xml

%XSLT_EXE% --@%TMP_ZBNFJAX%\input.arg -i%TMP_ZBNFJAX%/types-xmi.xml -t%ZBNFJAX_HOME%/xsl/gen/Java2xmi.xsl -w+ -y<*$output.file()>
<:>
echo off
pause
<.>
<.subtext>




<:file>
  <:>
@echo off
if "%TMP_ZBNFJAX%" == "" set TMP_ZBNFJAX=..\..\..\tmpDocu
call setZBNFJAX_HOME.bat silent    
<.>
<:for:$target:targets>
  ##Generate and insert the subtext for each target in the users script.
  <*subtext:$target.translator: target=$target, inputset=var.inputJava, output=$target.output>
<.for>
<:>
pause
goto :ende
:error
  echo error
:ende  
<.>
<.file>

