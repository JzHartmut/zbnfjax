

==JZcmd==


Filepath outfile = &sOutfile; ##sOutfile is defined in the java calling environment: path to the out file which is written by <+>...<.+>

main(){
    <+><:s>
:::://This file was generated by StateMGen - States.genH1
::::#ifndef __<&outfile.name()>_h__
::::#define __<&outfile.name()>_h__
::::/**This struct contains all data which are necessary in the generated code for the state processing. */
::::typedef struct <&stm.zbnfSrc.variables.StateSubStruct>_t 
::::{<.+>  
  for(state:stm.rootStates) {
    <+> 
::::  /**Contains the state identifier for nested level with history or parallel states. */
::::  int state<&state.stateId>;
::::  int timer<&state.stateId>;
    <.+>
  } //for  
    <+><:s>
::::} <&stm.zbnfSrc.variables.StateSubStruct>;
::::
::::int stepStates_<&stm.zbnfSrc.variables.StateSubStruct>(<:subtext:stateMethodArguments>);
::::
::::/**All state konstant identifier: */
::::<:for:state:stm.stateList>
::::::#define k<&state.stateId>_<&stm.zbnfSrc.variables.StateSubStruct> <&state.auxInfo().zsrcState.stateNr><:s>   
::::<.for:state><:s>
::::<.+>
    <+>
::::
::::#endif  // __<&outfile.name()>_h__
::::<.+>  




}


##same as in genC1:

sub stateMethodArguments()
{ 
  for(arg:stm.zbnfSrc.statefnargs) { <:><&arg><:hasNext>, <.hasNext><.>; }
}

