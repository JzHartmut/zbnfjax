

==JZcmd==


Filepath outfile = &sOutfile; ##sOutfile is defined in the java calling environment.

main(){
    <+><:s>
:::://This file was generated by StateMGen - States.genH1
::::#ifndef __<&outfile.name()>_h__
::::#define __<&outfile.name()>_h__
::::
::::/**Function type definition for getting the current state of a composite. */
::::typedef struct StateBaseGen_t const* StateCurrentRnGen(<&zsrc.stateRnFormalArgs>);
::::
::::/**Function type definition for the generated trans check routine. */
::::typedef int TransRnGen(<&zsrc.stateRnFormalArgs>);
::::
::::/**Function type definition for the user's exit routine. */
::::typedef int EntryRnGen(<&zsrc.stateRnFormalArgs>);
::::
::::/**Function type definition for the user's exit routine. */
::::typedef void ExitRnGen(<&zsrc.stateRnFormalArgs>);
::::
::::/**Function type definition for the exit routine for a composite or parallel state. */
::::typedef void ExitParallelRnGen(<&zsrc.stateRnFormalArgs>, struct StateBaseGen_t const* stateExitLast);
::::
::::
::::/**This structure is the base structure of any state in this context for the const STATE_StateConst definition. 
:::: * It is special, therefore code-generated, because the TransRnGen and the ExitRnGen hava a special signature in the users context.
:::: * The assembling of the data is the same for all code-generated state machines of this tool StateMcHgen.
:::: */
::::typedef struct StateBaseGen_t {
::::  void const* signature;
::::  int id;
::::  int ixCompositeState;
::::  int ixOwnState;
::::  ARRAYCONST_SimpleC(struct StateBaseGen_t const*) statePath;
::::
::::  /**Kind of the states, see bit definition in Fwc/fw_StateMachine.h. */
::::  int kind;
::::  StateCurrentRnGen* stateCurrent; //to get the current state of a composite.
::::  TransRnGen* checkTrans;          //Function pointer, routine pointer
::::  EntryRnGen* entry;               //Function pointer, routine pointer
::::  ExitRnGen* exit;                 //Function pointer, routine pointer
::::  ExitParallelRnGen* exitParallel; //to exit a Composite or Parallel state.
::::} StateBaseGen;
::::
::::
::::/**This struct contains all data which are necessary in the generated code for the state processing. */
::::typedef struct <&zsrc.topStateType>_t 
::::{<.+>  
  for(state:zsrc.stateM.rootStates) {
    <+> 
::::  /**Reference to the current state of this level. It refers the _StateConst which contains the function pointer to checkTrans... etc.. */
::::  StateBaseGen const* state<&state.stateId>;<.+>
    if(state.auxInfo.hasTimer) {
      <+>
::::::  /**Variable to count down a time transition. */
::::::  int timer<&state.stateId>;<.+>
      } 
  } //for  
    <+>
::::} <&zsrc.topStateType>;
::::
::::int stepStates_<&zsrc.topStateType>(<&zsrc.transFnArgs>);
::::
::::/**All state konstant identifier: */<.+>
 for(state:zsrc.stateM.stateList) {
    <+>
::::#define k<&state.stateId>_<&zsrc.topStateType> <&state.auxInfo().stateId><.+>   
 } //for
## for(state:zsrc.stateM.stateList) { call stateConstStruct(state = state); }
    <+>
::::
::::
::::#endif  // __<&outfile.name()>_h__
::::<.+>  

}




sub XXXstateConstStruct(Obj state: StateSimple)
{
  <+>
::
:://definition of the structure of constant data for any state: (stateMcHgenH.jzgen)
::typedef struct ConstState_<&state.stateId>_t 
::{ TransFn* checkTrans;
::} ConstState_<&state.stateId>;
::<.+>   

}
