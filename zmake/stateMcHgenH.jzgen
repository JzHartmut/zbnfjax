

==JZcmd==


Filepath outfile = &sOutfile; ##sOutfile is defined in the java calling environment.

main(){
    <+><:s>
:::://This file was generated by StateMGen - States.genH1
::::#ifndef __<&outfile.name()>_h__
::::#define __<&outfile.name()>_h__
::::
::::/**This struct contains all data which are necessary in the generated code for the state processing. */
::::typedef struct Data_<&stm.zbnfSrc.topState.stateName>_t 
::::{<.+>  
  for(state:stm.rootStates) {
    <+> 
::::  /**Contains the state identifier for nested level with history or parallel states. */
::::  int state<&state.stateId>;<.+>
    if(state.auxInfo.hasTimer) {
      <+>
::::::  /**Variable to count down a time transition. */
::::::  int timer<&state.stateId>;<.+>
      } 
  } //for  
    <+>
::::} Data_<&stm.zbnfSrc.topState.stateName>;
::::
::::int stepStates_<&stm.zbnfSrc.topStateType>(<&stm.zbnfSrc.transFnArgs>);
::::
::::/**All state konstant identifier: */<.+>
 for(state:stm.stateList) {
    <+>
::::#define k<&state.stateId>_<&stm.zbnfSrc.topStateType> <&state.auxInfo().stateId><.+>   
 } //for
 for(state:stm.stateList) { call stateConstStruct(state = state); }
    <+>
::::
::::#endif  // __<&outfile.name()>_h__
::::<.+>  

}




sub stateConstStruct(Obj state: StateSimple)
{
  <+>
::
:://definition of the structure of constant data for any state: (stateMcHgenH.jzgen)
::typedef struct ConstState_<&state.stateId>_t 
::{ TransFn* checkTrans;
::} ConstState_<&state.stateId>;
::<.+>   

}
