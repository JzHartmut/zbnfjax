<?ZBNF-www.vishia.org version="1.0" encoding="iso-8859-1" ?>
##This script converts a make prescript given in lines with translator (Zmake) to xml and than to ant.xml
##yyyy-mm-dd who       what
##2007-12-29 HartmutS  new: fileset as a new feature
$comment=[?...?].

Zmake::=<*|\nZMAKE_RULES:?> ZMAKE_RULES:  
{ \$<variable> ; 
| <target> ; 
} \e.

##A variable may contain a fileset.

string::= { <""?literal> | <forInputString> | @<$?inputField> | $<$?contentOfVariable> ? + }.
?en:string::="A string is a concatenation of \"literal\" + $contentOfVariable + @inputField + for(...)".

forInputString::= for ( <input?> : <string?> ).
?en:forInputString::="For any input file, a String was built. All strings are concatenated. ".

variable::=<$?@name> = [ fileset ( <fileset> ) | <expression>]. ##<string> ]. ## | { <execCmd> } ].


##same syntax is ZText:

expression::={ <value> ? [! + | -] }.

value::= [<?operator> + | -|] [<#?intValue> | 0x<#x?intValue> | <#f?floatValue> | '<!.?charValue>' | <""?textValue> 
              | $new\  <newJavaClass> | $!<staticJavaMethod> | $$<$?envVariable> | <datapath>].

newJavaClass::= <$\.?javapath> [ ({ <expression?argument> ? , } )].
staticJavaMethod::= <$\.?javapath> ( [ { <expression?argument> ? , } ] ).
##a javapath is the full package path and class [.staticmetod] separated by dot. 

datapath::=<?> $<$?startVariable>[\.{ <datapathElement> ? \.}] |{ <datapathElement> ? \.}.  

datapathElement::=<$@-?ident> [( [{ <expression?argument> ? ,}])<?whatisit=r>].

##end part from ZText


forInput::= :<$?@target>: for ( <input?> ) : <string?dst> := exec <exec?> .   ##TODO use right side of target::=


##old: cmd::= cmd ( <string?executable>) [, { arg(<string?arg>) ? ,}].
execCmd::= cmd ( <string?executable> ) [, curdir ( <""?curdir> )] [ , { arg (  <string?arg> ) ? , }].

fileset::= 
{ srcpath = <""?!prepSrcpath>
| srcext = <""?srcext>
##| [<?file> [<""?!prepFilePath>|<*\ \r\n,)?!prepFilePath>]] 
| <file>
? , | + 
}.


file::=<""?!prepFilePath>|<*\ \r\n,)?!prepFilePath>.

##The translator is written like a function. It may be nested.
target::=  [:<$?@target>:] 
[ <specials?do>  ##action without dst file. 
|
  ##<*|\ |\r|\n|:=?!prepOutputfile> :=  
  <output> :=
  [ for ( <input?> ) <routine?doForAll> 
  | <routine?>
  ##| exec <exec?>
  ##| <$?@translator> ( <input?> )
  ]
].

##The output will be parsed either in "" or all chars until whitespace or :=, than inner syntax.
output::=<*|\ |\r|\n|:=?!prepFilePath>.
##it doesn't work: output::=<""?!prepFilePath>|<*|\ |\r|\n|:=?!prepFilePath>.

routine::= 
  exec <exec?> 
|  <$?@translator> ( <inputlist?> )
.

specials::=
{ mkdir ( [ <""?mkdir>| <* )?mkdir>] )
| deltree ( [ <""?deltree>| <* )?deltree>] )
| exec <exec?>
? ,}.
?en:specials/mkdir::="creation of directory if not exists".
?en:specials/deltree::="delete of a directory tree or create if not exists".

exec::= \{ { [<execCmd> | $<$?execVariable/@name>] ; } \}.



##An input can be a file in "pathfile"
##Or an input can be a fileset given with a variable.
##Or an input can be a whole target in {....}
##Or an input can be a parameter, it is ident = "value"
##Or an input can be a filename without "" but to whitespace
##It is repeatable with , or + as separator.
inputlist::=<?>
{ <param> | <inputarg>
##| srcpath = <""?!prepSrcpath>
##| srcext = <""?srcext>
##| target = <""?@target>
##| task = <""?@target>
##| <param>
? , | +
}.


inputarg::=
[ $<$?referVariable>[: [$$<$?srcpathEnvVariable>|$<$?srcpathVariable>|] [<""?srcpathTargetInput>|<*\ \r\n,)?srcpathTargetInput>]]
| \{ <target> \}
| <""?!prepInputfile>
| <*\ \r\n,)?!prepInputfile>
].


?input/srcext::="This extension should be added to any src file.".

##inputSet::=<$?filesetVariable>[: [<""?!prepSrcpath>|<*\ \r\n,)?!prepSrcpath>]]. ##creates the element inputSet with attribute name
##inputSet::=<$?filesetVariable>[: [$$<$?srcpathEnvVariable>|$<$?srcpathVariable>|] [<""?srcpath>|<*\ \r\n,)?srcpath>]]. ##creates the element inputSet with attribute name

prepSrcpath::=<prepPathbase?srcpath>.

prepInputfile::=<prepFilePath?input>.

##example: D:\path/path/file.c          normal path with \ or /
##example: D:srcpath:path/path/file.c   a special srcpath, inside a path
##example: D:srcpath:file.c             a special srcpath, inside a file directly
##example: srcpath:path/path/file.c     without drive, the drive has only one letter.

##NOTE ZBNF: [?:=] means: if := occurs, it doesnot match.
##NOTE ZBNF: [<*:?@pathbase>[?:=]:] means: all chars until ':', but the ':' must follow. it is optional.

prepPathbase::=<$NoWhiteSpaces><! *?>
  [$<$?scriptVariable> [/]
  | [<!.?@drive>:]                              ## only 1 char with followed : is a drive like D:
    [ [/|\\]<?@absPath>]
  ]  
  [<*?@pathbase>]                      ## all until : is the pathbase, not part of the
  .

prepFilePath::=<$NoWhiteSpaces><! *?>
[<!.?@drive>:]               ## only 1 char with followed : is drive
[ [/|\\]<?@absPath>]         ## starting with / is absolute path
[<*:?@pathbase>[?:=]:]       ## all until : is pathbase
[ <*|**?@path>               ## all until ** is path
| <toLastCharIncl:/\\?@path> ## or all until last \\ or / is path
|]                           ## or no path is given.
[ **<?@allTree>[/\\] ]       ## ** is found, than files in subtree
[ <**?@file>                 ## all until * is the file (begin)
  *<?@someFiles>             ## * detect: set someFiles
| <toLastChar:.?@file>       ## or all until dot is the file
|]                           ## or no file is given.
[\.*<?@wildcardExt>]         ## .* is wildcard-extension
[ <* \e?@ext> ]              ## the rest is the extension
.


##  [ **<?@allTree><*?@ext>                     ## ** means: all files also in subfolders. The rest after** is extension.
##  | *<?@someFiles><*?@ext>                    ## * means: Some files or placeholder for the name. The rest after * is extension.
##  | <stringtolastExclChar.?@file><*?@ext>     ## or a filename and a extension if a . is found
##  | <*?@file>                                 ## or only a file if no . is found.
##  ]<! *?>.

##prepOutputfile::=<prepFilePath?output>.

##prepOutputFilePath::=[<+<</:\\?@path>]<*?@file>.

param::=<$?name> = [ <""?@value> | { <inputarg> ? +} ].
##[ <$?name> = [ <""?@value>]]   ##if given, it is a named parameter, with a possible value. If not given it is a input file or fileset.





