##This script reads a zbnf syntax script and generates a proper java output file for 
##It should be included as subscript
##template for calling script and necessary script variables:

include zbnfjax/jzTc/genJavaOut.jzTc;

String zbnfSyntax = "my.zbnf";
String javaDir = "path/to/Javafiles";
String pkgpath = "my.package.path";
String javaclass = "MyJavaOutput";



==JZtxtcmd==

##set the text output for this script:
##
text = <:><&javaDir>/<&pkgpath.replace(".","/")>/<&javaclass>.java<.>;


main()
{
  Obj parser = java new org.vishia.zbnf.ZbnfParser(console);
  parser.setSyntaxFile(File: <:><&zbnfSyntax><.>);

  ##test.dataHtml(parser.listSubPrescript, File: T:/test.html);
  <:>
==package <&pkgpath>;
==
==import java.util.ArrayList;
==import java.util.List;
==
==/**This file is generated by genJavaOut.jzTc script. */
==public class <&javaclass> {
  <.>
  for(subclass:parser.listSubPrescript) {
    <+out><&subclass.sSemantic><.+n>
    <:>
====  public static class <&subclass.sSemantic> {
====<.>
    call child( syntaxprescript = subclass.childSyntaxPrescripts);   
    <:>
====  }
    <.>  
  } ##for
  <:>  
  }
  <.>
  
  
  
}



sub child ( Obj syntaxprescript, Bool blist) {
  String typePre =""; String typePost ="";
  if(blist) { typePre = "List<"; typePost = ">"; }
  for(item: syntaxprescript ) {
      String semantic = item.sSemantic;
      if(semantic >= "@") { semantic = semantic.substring(1); }
      ##
      if(semantic && semantic.length()>0) {
        if(item.eType.type == "F")     { <:>      public float <&semantic>;<:n><.> }
        elsif(item.eType.type == "I")  { <:>      public int <&semantic>;  <:n><.> }
        elsif(item.eType.type == "s")  { <:>      public String <&semantic>; //<&item.toString()> <:n><.> }
      }
      if(item.eType.type == "{")  { 
        <:>   //repetition<:n><.>
        call child(syntaxprescript = item.childSyntaxPrescripts, blist=true);
      }
      elsif(item.eType.type == "=")   { ##a syntaxComponenet 
        String sDefinitionIdent = item.sDefinitionIdent;
        if(blist) {
          <:>
==========          
==========    List<<&sDefinitionIdent>> list_<&sDefinitionIdent> = new ArrayList<<&sDefinitionIdent>>();
==========              
==========    /**From ZBNF syntax: &lt;...?<&sDefinitionIdent>> */
==========    public <&sDefinitionIdent> new_<&sDefinitionIdent>() { return new <&sDefinitionIdent>(); }
==========    public void add_<&sDefinitionIdent>(<&sDefinitionIdent> val) { list_<&sDefinitionIdent>.add(val); }
==========
          <.>
        } else {
          <:>
==========          
==========    <&sDefinitionIdent> <&sDefinitionIdent>;
==========              
==========    /**From ZBNF syntax: &lt;...?<&sDefinitionIdent>> */
==========    public <&sDefinitionIdent> new_<&sDefinitionIdent>() { return new <&sDefinitionIdent>(); }
==========    public void set_<&sDefinitionIdent>(<&sDefinitionIdent> val) { <&sDefinitionIdent> = val; }
          <.>
        }
        
      } elsif(item.childSyntaxPrescripts) {
        call child ( syntaxprescript = item.childSyntaxPrescripts, blist = blist ); ##any sub syntax option etc.
      }
      ##
    }

}
