<?ZBNF-www.vishia.de version="1.0" encoding="iso-8859-1" ?>
$xmlns:topics="http://www.vishia.de/2006/Topics".
$xmlns:xhtml="http://www.w3.org/1999/xhtml".
$inputEncodingKeyword="encoding".
$comment=/*...*/.
$endlineComment=//.

##Top level Syntax for the C++ statemachine source:
##
StateMachine::=      
{ #include <* \n?includeLine>
}

#define StateInstance_StateMgen <* \n\r?StateInstance>

typedef int TransFn(<*)?transFnArgs>);

{
  typedef struct [<$?tagName>] \{
  { struct <stateStruct> ;  } 
  \} <$?stateName> ;

| int entry_<stateMethod?entryState> ;
| void exit_<stateMethod?exitState> ;
| int checkTrans_<stateMethod?checkState>;
}
 

extern const <$?topStateType> <$?topStateName> ;

\e.

##end top level syntax.


##Note: The [<?args> produces a String with the whole formal argument list till ),
##The <...?arg> produces one entry per argument till , or ). The right identifier is used as argVariables in the add_arg(String) method.
##
stateMethod::=<$?state> ( [<?args> { <* |,|)?arg> ? , } ] ). ##Note: arg without left and right white spaces, space after asterisk



stateStruct::=
[<$?tagname>] \{
[ State_Fwc
| StateComposite_Fwc <?stateComposite>
| StateHistory_Fwc <?hasHistory>
| StateParallel_Fwc <?stateParallel>
]
  <*_;\ ?StateIdName>[_<*\ ;?stateId>] ;
[{ TransFn * <$?Dst_Dst> ;

| struct <stateStruct> ;

}] 
\} <$?stateName> .

