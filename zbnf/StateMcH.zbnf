<?ZBNF-www.vishia.de version="1.0" encoding="iso-8859-1" ?>
$xmlns:topics="http://www.vishia.de/2006/Topics".
$xmlns:xhtml="http://www.w3.org/1999/xhtml".
$inputEncodingKeyword="encoding".
$comment=/*...*/.
$endlineComment=//.

##Top level Syntax for the C++ statemachine source:
##
StateMachine::=      
{ #include <* \n?includeLine>
}

#define StateInstance_StateMgen <* \n\r?StateInstance>

typedef int TransFn(<*)?transFnArgs>);

{
  typedef struct <stateDef> ;

| int entry_<stateMethod?entryState> ;
| void exit_<stateMethod?exitState> ;
| int checkTrans_<stateMethod?checkState>;
}


typedef struct <stateStruct?topState> ;


\e.

##end top level syntax.


##Note: The [<?args> produces a String with the whole formal argument list till ),
##The <...?arg> produces one entry per argument till , or ). The right identifier is used as argVariables in the add_arg(String) method.
##
stateMethod::=<$?state> ( [<?args> { <* |,|)?arg> ? , } ] ). ##Note: arg without left and right white spaces, space after asterisk


##A stateDef is the definition of a simple state whith ists transitions.
##
stateDef::=
[<$?tagname>] \{
[ State_Fwc <*_;\ ?StateIdName>[_<*\ ;?stateId>] ;
| StateParallel_Fwc <$?stateParallel> ; ## it it starts with this, it is a parallel state. 
]
[{ TransFn * <$?Dst_Dst> ;
 | StateHistory_Fwc <$?stateHistory> ;   ## or if it starts with this, it has a history state for history entry.
 | <stateDefInStateStruct> ;             ## a state typedef written before
 | struct <stateStruct> ;                ## a definition of a composite state.
} <?isComposite> ] 
\} <$?stateType> .



##A stateStruct defines a composite or parallel state.
##
stateStruct::= [<$?tagname>] \{
[ StateParallel_Fwc <$?stateParallel> ; ## it it starts with this, it is a parallel state. 
| StateHistory_Fwc <$?stateHistory> ;   ## or if it starts with this, it has a history state for history entry.
|]
{ 
  <stateDefInStateStruct> ;             ## a state typedef written before
| struct <stateStruct> ;                ## a definition of a composite state.

} 
\} <$?stateName> .



stateDefInStateStruct::=[ struct <$?stateTag> | <$?stateType> ] [const * <?ref>] <$?stateName>.



old::=
  <*_;\ ?StateIdName>[_<*\ ;?stateId>] ;
[ State_Fwc
| StateComposite_Fwc <?stateComposite>
| StateHistory_Fwc <?hasHistory>
| StateParallel_Fwc <?stateParallel>
]





extern const <$?topStateType> <$?topStateName> ;

