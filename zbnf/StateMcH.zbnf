<?ZBNF-www.vishia.de version="1.0" encoding="iso-8859-1" ?>
$xmlns:topics="http://www.vishia.de/2006/Topics".
$xmlns:xhtml="http://www.w3.org/1999/xhtml".
$inputEncodingKeyword="encoding".
$comment=/*...*/.
$endlineComment=//.

##Top level Syntax for the C++ statemachine source:
##
StateMachine::=      
#ifndef <*\n?>
#define <*\n?>
{ #include <* \n?includeLine>
}

{ #define StateInstance_StateMgen <* \n\r?StateInstance>
| #define StateType_StateMgen <*\n\r\t ?topStateType>
| #define UserDataType_StateMgen <*\n\r\t ?userDataType>
| typedef int TransFn(<*)?transFnArgs>);
}
{
  typedef struct <stateDef> ;

| int entry_<stateMethod?entryState> ;
| void exit_<stateMethod?exitState> ;
| int checkTrans_<stateMethod?checkState>;
}

##Note: difference between typedef struct <stateDef> is: The topState does not start with 'State_Fwc' etc.
##typedef struct <stateStruct?topState> ;

#endif

\e.

##end top level syntax.


##Note: The [<?args> produces a String with the whole formal argument list till ),
##The <...?arg> produces one entry per argument till , or ). The right identifier is used as argVariables in the add_arg(String) method.
##
stateMethod::=<$?restName> ( [<?args> { <* |,|)?arg> ? , } ] ). ##Note: arg without left and right white spaces, space after asterisk


##A stateDef is the definition of a simple state whith ists transitions.
##
stateDef::=
[<$?tagname>] \{
[ <$?parallelParentState> parallelParent ;
  State_Fwc <*_;\ ?StateIdName>[_<*\ ;?stateId>] ;
| 
  [<$?parentState> parent ; ]
  [ State_Fwc <*_;\ ?StateIdName>[_<*\ ;?stateId>] ;
  | StateParallel_Fwc <*_;\ ?stateParallel>[_<*\ ;?stateId>] ; ## it it starts with this, it is a parallel state. 
  ]
  [{ TransFn * <$?dotransDst> ; }]
  [ StateHistory_Fwc <$?stateHistory> ; ]   ## or if it starts with this, it has a history state for history entry.
]
\} <$?stateName> .




